/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.paimon.operation;

import org.apache.paimon.catalog.Catalog;
import org.apache.paimon.catalog.FileSystemCatalog;
import org.apache.paimon.catalog.Identifier;
import org.apache.paimon.data.BinaryRow;
import org.apache.paimon.data.BinaryRowWriter;
import org.apache.paimon.data.GenericRow;
import org.apache.paimon.fs.Path;
import org.apache.paimon.fs.local.LocalFileIO;
import org.apache.paimon.schema.Schema;
import org.apache.paimon.table.FileStoreTable;
import org.apache.paimon.table.sink.CommitMessage;
import org.apache.paimon.table.sink.CommitMessageImpl;
import org.apache.paimon.table.sink.StreamTableCommit;
import org.apache.paimon.types.DataTypes;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Tests for {@link AppendOnlyFixedBucketFileStoreWrite}. */
public class AppendOnlyFixedBucketFileStoreWriteTest {

    @TempDir java.nio.file.Path tempDir;

    @Test
    public void testRefreshCompactFilesEnabled() throws Exception {
        FileStoreTable writeAndCompactTable =
                createFileStoreTableWithOptions(
                        new HashMap<String, String>() {
                            {
                                put("bucket", "1");
                                put("bucket-key", "f1");
                                put("file.format", "avro");
                                put("compaction.max.file-num", "2");
                                put("compaction.force-refresh-files", "true");
                            }
                        });

        FileStoreTable writeOnlyTable =
                writeAndCompactTable.copy(
                        new HashMap<String, String>() {
                            {
                                put("write-only", "true");
                                put("compaction.force-refresh-files", "false");
                            }
                        });

        AppendOnlyFileStoreWrite write1 =
                (AppendOnlyFileStoreWrite) writeOnlyTable.store().newWrite("ss");
        AppendOnlyFileStoreWrite write2 =
                (AppendOnlyFileStoreWrite) writeAndCompactTable.store().newWrite("ss");

        StreamTableCommit commit1 = writeOnlyTable.newStreamWriteBuilder().newCommit();
        StreamTableCommit commit2 = writeAndCompactTable.newStreamWriteBuilder().newCommit();

        GenericRow row1 = GenericRow.of(0, 0, 0);
        GenericRow row2 = GenericRow.of(1, 1, 1);

        // write-and-compact job write data first
        write2.write(partition(0), 0, row1);

        // write-only job write and commit data
        write1.write(partition(0), 0, row2);
        commit1.commit(1, write1.prepareCommit(true, 1));

        // write-and-compact job commit data, files generated by write-only job should also be
        // compacted
        List<CommitMessage> commitMessages = write2.prepareCommit(true, 2);
        Assertions.assertThat(
                        commitMessages.stream()
                                .map(s -> (CommitMessageImpl) s)
                                .mapToInt(
                                        commitMessage ->
                                                commitMessage.newFilesIncrement().newFiles().size())
                                .sum())
                .isEqualTo(1);
        Assertions.assertThat(
                        commitMessages.stream()
                                .map(s -> (CommitMessageImpl) s)
                                .mapToInt(
                                        commitMessage ->
                                                commitMessage
                                                        .compactIncrement()
                                                        .compactBefore()
                                                        .size())
                                .sum())
                .isEqualTo(2);
        Assertions.assertThat(
                        commitMessages.stream()
                                .map(s -> (CommitMessageImpl) s)
                                .mapToInt(
                                        commitMessage ->
                                                commitMessage
                                                        .compactIncrement()
                                                        .compactAfter()
                                                        .size())
                                .sum())
                .isEqualTo(1);

        commit2.commit(2, commitMessages);

        // check committed data, row count is 2 and file count is 1
        FileStoreScan scan = writeAndCompactTable.store().newScan();
        Assertions.assertThat(
                        scan.withPartitionBucket(partition(0), 0)
                                .totalRecordCount(writeAndCompactTable.latestSnapshot().get()))
                .isEqualTo(2);
        Assertions.assertThat(
                        scan.withPartitionBucket(partition(0), 0)
                                .withSnapshot(writeAndCompactTable.latestSnapshot().get())
                                .plan()
                                .files()
                                .size())
                .isEqualTo(1);
    }

    @Test
    public void testRefreshCompactFilesDisabled() throws Exception {
        FileStoreTable writeAndCompactTable =
                createFileStoreTableWithOptions(
                        new HashMap<String, String>() {
                            {
                                put("bucket", "1");
                                put("bucket-key", "f1");
                                put("file.format", "avro");
                                put("compaction.max.file-num", "2");
                            }
                        });

        FileStoreTable writeOnlyTable =
                writeAndCompactTable.copy(
                        new HashMap<String, String>() {
                            {
                                put("write-only", "true");
                            }
                        });

        AppendOnlyFileStoreWrite write1 =
                (AppendOnlyFileStoreWrite) writeOnlyTable.store().newWrite("ss");
        AppendOnlyFileStoreWrite write2 =
                (AppendOnlyFileStoreWrite) writeAndCompactTable.store().newWrite("ss");

        StreamTableCommit commit1 = writeOnlyTable.newStreamWriteBuilder().newCommit();
        StreamTableCommit commit2 = writeAndCompactTable.newStreamWriteBuilder().newCommit();

        GenericRow row1 = GenericRow.of(0, 0, 0);
        GenericRow row2 = GenericRow.of(1, 1, 1);

        // write-and-compact job write data first
        write2.write(partition(0), 0, row1);

        // write-only job write and commit data
        write1.write(partition(0), 0, row2);
        commit1.commit(1, write1.prepareCommit(true, 1));

        // write-and-compact job commit data, files generated by write-only job will not be
        // compacted
        List<CommitMessage> commitMessages = write2.prepareCommit(true, 2);
        Assertions.assertThat(
                        commitMessages.stream()
                                .map(s -> (CommitMessageImpl) s)
                                .mapToInt(
                                        commitMessage ->
                                                commitMessage.newFilesIncrement().newFiles().size())
                                .sum())
                .isEqualTo(1);
        Assertions.assertThat(
                        commitMessages.stream()
                                .map(s -> (CommitMessageImpl) s)
                                .mapToInt(
                                        commitMessage ->
                                                commitMessage
                                                        .compactIncrement()
                                                        .compactBefore()
                                                        .size())
                                .sum())
                .isEqualTo(0);
        Assertions.assertThat(
                        commitMessages.stream()
                                .map(s -> (CommitMessageImpl) s)
                                .mapToInt(
                                        commitMessage ->
                                                commitMessage
                                                        .compactIncrement()
                                                        .compactAfter()
                                                        .size())
                                .sum())
                .isEqualTo(0);

        commit2.commit(2, commitMessages);

        // check committed data, row count is 2 and file count is 2
        FileStoreScan scan = writeAndCompactTable.store().newScan();
        Assertions.assertThat(
                        scan.withPartitionBucket(partition(0), 0)
                                .totalRecordCount(writeAndCompactTable.latestSnapshot().get()))
                .isEqualTo(2);
        Assertions.assertThat(
                        scan.withPartitionBucket(partition(0), 0)
                                .withSnapshot(writeAndCompactTable.latestSnapshot().get())
                                .plan()
                                .files()
                                .size())
                .isEqualTo(2);
    }

    protected FileStoreTable createFileStoreTableWithOptions(Map<String, String> options)
            throws Exception {
        Catalog catalog = new FileSystemCatalog(LocalFileIO.create(), new Path(tempDir.toString()));
        Schema schema =
                Schema.newBuilder()
                        .column("f0", DataTypes.INT())
                        .column("f1", DataTypes.INT())
                        .column("f2", DataTypes.INT())
                        .partitionKeys("f0")
                        .options(options)
                        .build();
        Identifier identifier = Identifier.create("default", "test");
        catalog.createDatabase("default", false);
        catalog.createTable(identifier, schema, false);
        return (FileStoreTable) catalog.getTable(identifier);
    }

    private BinaryRow partition(int i) {
        BinaryRow binaryRow = new BinaryRow(1);
        BinaryRowWriter writer = new BinaryRowWriter(binaryRow);
        writer.writeInt(0, i);
        writer.complete();
        return binaryRow;
    }
}
