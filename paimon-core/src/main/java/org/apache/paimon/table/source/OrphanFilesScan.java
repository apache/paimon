/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.paimon.table.source;

import org.apache.paimon.CoreOptions;
import org.apache.paimon.table.source.snapshot.BoundedChecker;
import org.apache.paimon.table.source.snapshot.FollowUpScanner;
import org.apache.paimon.table.source.snapshot.OrphanFilesFollowUpScanner;
import org.apache.paimon.table.source.snapshot.SnapshotReader;
import org.apache.paimon.table.source.snapshot.StartingScanner;
import org.apache.paimon.utils.SnapshotManager;

/** {@link StreamTableScan} implementation for files planning committed by other users. */
public class OrphanFilesScan extends DataTableStreamScan {

    private final String currentUser;

    private OrphanFilesScan(
            CoreOptions options,
            SnapshotReader snapshotReader,
            SnapshotManager snapshotManager,
            String currentUser) {
        super(options, snapshotReader, snapshotManager, null, false, null);
        this.currentUser = currentUser;
    }

    @Override
    protected StartingScanner createStartingScanner(boolean isStreaming) {
        // Skip create Starting scanner. No need to scan existing files, orphan files usually
        // generated by new snapshots committed by other users.
        return null;
    }

    @Override
    protected FollowUpScanner createFollowUpScanner() {
        // create followup scanner for orphan files committed by other users
        return new OrphanFilesFollowUpScanner(currentUser);
    }

    @Override
    protected BoundedChecker createBoundedChecker() {
        return BoundedChecker.neverEnd(); // should never end
    }

    /** Builder for {@link OrphanFilesScan}. */
    public static class Builder {
        private CoreOptions options;
        private SnapshotReader snapshotReader;
        private SnapshotManager snapshotManager;
        private String currentUser;

        public Builder withOptions(CoreOptions options) {
            this.options = options;
            return this;
        }

        public Builder withSnapshotReader(SnapshotReader snapshotReader) {
            this.snapshotReader = snapshotReader;
            return this;
        }

        public Builder withSnapshotManager(SnapshotManager snapshotManager) {
            this.snapshotManager = snapshotManager;
            return this;
        }

        public Builder withCurrentUser(String currentUser) {
            this.currentUser = currentUser;
            return this;
        }

        public OrphanFilesScan build() {
            return new OrphanFilesScan(options, snapshotReader, snapshotManager, currentUser);
        }
    }
}
