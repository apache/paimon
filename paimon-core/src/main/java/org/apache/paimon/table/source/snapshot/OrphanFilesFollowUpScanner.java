/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.paimon.table.source.snapshot;

import org.apache.paimon.Snapshot;
import org.apache.paimon.table.source.ScanMode;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** {@link FollowUpScanner} for read newly created files committed by other users. */
public class OrphanFilesFollowUpScanner implements FollowUpScanner {

    private static final Logger LOG = LoggerFactory.getLogger(OrphanFilesFollowUpScanner.class);

    private final String currentUser;

    public OrphanFilesFollowUpScanner(String currentUser) {
        this.currentUser = currentUser;
    }

    @Override
    public boolean shouldScanSnapshot(Snapshot snapshot) {
        if (LOG.isDebugEnabled()) {
            LOG.debug(
                    "Snapshot id {} commit user is {}, current user is {}.",
                    snapshot.id(),
                    snapshot.commitUser(),
                    this.currentUser);
        }

        // Orphan files are usually generated by snapshots which commit user is not current user
        return !currentUser.equals(snapshot.commitUser());
    }

    @Override
    public SnapshotReader.Plan scan(Snapshot snapshot, SnapshotReader snapshotReader) {
        return snapshotReader.withMode(ScanMode.DELTA).withSnapshot(snapshot).read();
    }
}
